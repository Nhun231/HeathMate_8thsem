generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                    @id @default(autoincrement())
  email                 String                 @unique
  password              String                 @db.VarChar(128)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime?
  status                UserStatus             @default(Active)
  roleId                Int
  
  Calculates            Calculate[]
  Devices               Device[]
  DietPlans             DietPlan[]
  Dishes                Dish[]
  ExpertCertificates    ExpertCertificate[]
  Ingredients           Ingredient[]
  Meals                 Meal[]
  paymentsFrom          Payment[]              @relation("paymentsFrom")
  paymentsTo            Payment[]              @relation("paymentsTo")
  Profile               Profile?
  RefreshTokens         RefreshToken[]
  StepLogs              StepLog[]
  Subscriptions         Subscription[]
  WaterData             UserWaterData[]
  WaterReminderSettings WaterReminderSetting[]
  WeightLogs            WeightLog[]
  role                  Role                  @relation(fields: [roleId], references: [id])
}

model Profile {
  id       Int            @id @default(autoincrement())
  userId   Int            @unique
  fullname String?        @db.VarChar(128)
  phoneNumber String?     @db.VarChar(50)
  gender   Gender?
  dob      DateTime?
  height   Float?
  weight   Float?
  activity ActivityLevel?
  avatar   String?        @db.VarChar(1024)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime?
  user     User           @relation(fields: [userId], references: [id])

}

model Role {
  id       Int        @id @default(autoincrement())
  name     RoleName   @unique
  description String
  users       User[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime?
}


model VerificationCode {
  id        Int                   @id @default(autoincrement())
  email     String                @db.VarChar(64)
  code      String                @db.VarChar(8)
  type      VerificationCodeType
  expiresAt DateTime
  createdAt DateTime              @default(now())

  @@unique([email, code, type])
  @@index([expiresAt])
}

model RefreshToken {
  token     String   @id
  userId    Int
  deviceId  Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  device    Device   @relation(fields: [deviceId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Device {
  id            Int            @id @default(autoincrement())
  userId        Int
  userAgent     String
  ip            String
  lastActive    DateTime       @updatedAt
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  user          User           @relation(fields: [userId], references: [id])
  RefreshTokens RefreshToken[]
}

model Calculate {
  id          Int       @id @default(autoincrement())
  userId      Int
  bmr         Float?
  tdee        Float?
  bmi         Float?
  waterNeeded Float?
  protein     Float?
  fat         Float?
  carbs       Float?
  fiber       Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  user        User      @relation(fields: [userId], references: [id])
}

model DietPlan {
  id                 Int       @id @default(autoincrement())
  userId             Int
  goal               Goal?
  targetWeightChange Float?
  dailyCalories      Float?
  durationDays       Int?
  startDate          DateTime?
  endDate            DateTime?
  referenceTDEE      Float?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime?
  deletedAt          DateTime?
  user               User      @relation(fields: [userId], references: [id])
}

model WeightLog {
  id        Int       @id @default(autoincrement())
  userId    Int
  date      DateTime?
  weight    Float?
  createdAt DateTime?
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
}

model StepLog {
  id             Int       @id @default(autoincrement())
  userId         Int
  date           DateTime?
  steps          Int?
  caloriesBurned Float?
  createdAt      DateTime?
  deletedAt      DateTime?
  user           User      @relation(fields: [userId], references: [id])
}

model UserWaterData {
  id        Int       @id @default(autoincrement())
  userId    Int
  date      DateTime?
  target    Float?
  consumed  Float?
  unit      String?
  createdAt DateTime?
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
}

model WaterReminderSetting {
  id            Int       @id @default(autoincrement())
  userId        Int
  reminderGap   Int?
  expoPushToken String?
  wakeUpTime    DateTime?
  sleepTime     DateTime?
  createdAt     DateTime?
  deletedAt     DateTime?
  user          User      @relation(fields: [userId], references: [id])
}

model Ingredient {
  id              Int              @id @default(autoincrement())
  userId          Int
  name            String?
  caloriesPer100g Float?
  proteinPer100g  Float?
  fatPer100g      Float?
  carbsPer100g    Float?
  fiberPer100g    Float?
  category        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  DishIngredients DishIngredient[]
  user            User             @relation(fields: [userId], references: [id])
  MealIngredients MealIngredient[]
}

model Dish {
  id              Int              @id @default(autoincrement())
  userId          Int
  name            String?          @db.VarChar(256)
  description     String?          @db.VarChar(1024)
  type            String?          @db.VarChar(64)
  calories        Float?
  protein         Float?
  fat             Float?
  carbs           Float?
  fiber           Float?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  user            User             @relation(fields: [userId], references: [id])
  DishIngredients DishIngredient[]
  MealDishes      MealDish[]
}

model DishIngredient {
  dishId       Int
  ingredientId Int
  dish         Dish       @relation(fields: [dishId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

  @@id([dishId, ingredientId])
}

model Meal {
  id              Int              @id @default(autoincrement())
  userId          Int
  mealType        MealType?
  date            DateTime?
  calories        Float?
  protein         Float?
  fat             Float?
  carbs           Float?
  fiber           Float?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  user            User             @relation(fields: [userId], references: [id])
  MealDishes      MealDish[]
  MealIngredients MealIngredient[]
}

model MealDish {
  mealId Int
  dishId Int
  dish   Dish @relation(fields: [dishId], references: [id])
  meal   Meal @relation(fields: [mealId], references: [id])

  @@id([mealId, dishId])
}

model MealIngredient {
  mealId       Int
  ingredientId Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  meal         Meal       @relation(fields: [mealId], references: [id])

  @@id([mealId, ingredientId])
}

model ExpertCertificate {
  id             Int                @id @default(autoincrement())
  userId         Int
  certificateUrl String?            @db.VarChar(1024)
  status         CertificateStatus?
  submittedAt    DateTime?
  approvedAt     DateTime?
  expiresAt      DateTime?
  user           User               @relation(fields: [userId], references: [id])
}

model Subscription {
  id        Int                 @id @default(autoincrement())
  userId    Int
  type      SubscriptionType?
  startDate DateTime?
  endDate   DateTime?
  status    SubscriptionStatus?
  user      User                @relation(fields: [userId], references: [id])
}

model Payment {
  id         Int          @id @default(autoincrement())
  fromUserId Int
  toUserId   Int
  amount     Float?
  date       DateTime     @default(now())
  type       PaymentType?
  fromUser   User         @relation("paymentsFrom", fields: [fromUserId], references: [id])
  toUser     User         @relation("paymentsTo", fields: [toUserId], references: [id])
}

enum UserStatus {
  Active
  Inactive
  Banned
}

enum RoleName {
  Admin
  Customer
  NutritionExpert
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
}

enum Gender {
  Male
  Female
  Other
}

enum ActivityLevel {
  Sedentary
  Light
  Moderate
  Active
  VeryActive
}

enum Goal {
  LoseWeight
  MaintainWeight
  GainWeight
}

enum MealType {
  Breakfast
  Lunch
  Dinner
  Snack
}

enum CertificateStatus {
  Pending
  Approved
  Rejected
}

enum SubscriptionType {
  Standard
  VIP
}

enum SubscriptionStatus {
  Active
  Inactive
  Expired
}

enum PaymentType {
  CustomerToAdmin
  AdminToExpert
}
